diff --git a/CMakeLists.txt b/CMakeLists.txt
index 35a235f61..333537d04 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -112,6 +112,10 @@ option(BUILD_JIT "Build the jit package" off)
 # Optionally use TBB for threading
 option(ENABLE_TBB "Enable support for Threading Building Blocks (TBB)" off)

+# Allow builds without the Python API or Python dependencies
+option(BUILD_PYTHON "Build the Python API" ON)
+set(BUILD_PYTHON ON)
+
 # this needs to go before CUDA setup
 include (HOOMDHIPSetup)

@@ -122,7 +126,12 @@ include (hoomd-macros)
 # setup MPI support
 include (HOOMDMPISetup)
 # find the python libraries to link to
-include(HOOMDPythonSetup)
+if(BUILD_PYTHON)
+    include(HOOMDPythonSetup)
+    set(API_INSTALL_DIR ${PYTHON_SITE_INSTALL_DIR})
+else()
+    set(API_INSTALL_DIR "hoomd")
+endif()

 if (NOT ENABLE_HIP OR HIP_PLATFORM STREQUAL "nvcc")
     option(BUILD_MPCD "Build the mpcd package" on)
diff --git a/hoomd/CMakeLists.txt b/hoomd/CMakeLists.txt
index d71f6ca96..fe72baf9d 100644
--- a/hoomd/CMakeLists.txt
+++ b/hoomd/CMakeLists.txt
@@ -3,9 +3,12 @@ add_subdirectory(extern)
 # configure the version information file
 configure_file (HOOMDVersion.h.in ${HOOMD_BINARY_DIR}/hoomd/include/HOOMDVersion.h)

-install(FILES ${HOOMD_BINARY_DIR}/hoomd/include/HOOMDVersion.h
+if(BUILD_PYTHON)
+    install(
+        FILES ${HOOMD_BINARY_DIR}/hoomd/include/HOOMDVersion.h
         DESTINATION ${PYTHON_SITE_INSTALL_DIR}/include
         )
+endif()

 ##############################
 ## Source setup
@@ -194,7 +197,15 @@ endif (ENABLE_HIP)

 #########################
 ## Build the module
-pybind11_add_module(_hoomd SHARED module.cc ${_hoomd_sources} ${_cuda_sources} ${_hoomd_headers} NO_EXTRAS)
+if(BUILD_PYTHON)
+    pybind11_add_module(_hoomd SHARED NO_EXTRAS
+        module.cc ${_hoomd_sources} ${_cuda_sources} ${_hoomd_headers}
+        )
+else()
+    add_library(_hoomd SHARED
+        module.cc ${_hoomd_sources} ${_cuda_sources} ${_hoomd_headers}
+        )
+endif()

 # alias into the HOOMD namespace so that plugins and symlinked components both work
 add_library(HOOMD::_hoomd ALIAS _hoomd)
@@ -203,12 +214,15 @@ add_library(HOOMD::_hoomd ALIAS _hoomd)
 add_library (quickhull SHARED extern/quickhull/QuickHull.cpp)

 # link the library to its dependencies
-target_link_libraries(_hoomd PUBLIC pybind11::pybind11 quickhull Eigen3::Eigen)
+if(BUILD_PYTHON)
+    target_link_libraries(_hoomd PUBLIC pybind11::pybind11)
+endif()
+target_link_libraries(_hoomd PUBLIC quickhull Eigen3::Eigen)

 # specify required include directories
 target_include_directories(_hoomd PUBLIC
                                   $<BUILD_INTERFACE:${HOOMD_SOURCE_DIR}>
-                                  $<INSTALL_INTERFACE:${PYTHON_SITE_INSTALL_DIR}/include>)
+                                  $<INSTALL_INTERFACE:${API_INSTALL_DIR}/include>)

 target_include_directories(_hoomd PUBLIC
                                   $<BUILD_INTERFACE:${HOOMD_BINARY_DIR}/hoomd/include>)
@@ -288,11 +302,15 @@ endif()
 fix_cudart_rpath(_hoomd)

 # install the library
-install(TARGETS _hoomd quickhull EXPORT HOOMDTargets
-        LIBRARY DESTINATION ${PYTHON_SITE_INSTALL_DIR}
-        )
+install(
+    TARGETS _hoomd quickhull EXPORT HOOMDTargets
+    LIBRARY DESTINATION ${API_INSTALL_DIR}
+    )
+
+##################################################
+## Python only modules
+if(BUILD_PYTHON)

-################ Python only modules
 # copy python modules to the build directory to make it a working python package
 MACRO(copy_file file)
     add_custom_command (
@@ -337,13 +355,20 @@ endforeach()

 add_custom_target(copy_hoomd ALL DEPENDS ${files})

+endif(BUILD_PYTHON)
+## end of Python only modules
+##################################################
+
 # install headers in installation target
-install(FILES ${_hoomd_headers}
-        DESTINATION ${PYTHON_SITE_INSTALL_DIR}/include/hoomd
-       )
+install(
+    FILES ${_hoomd_headers}
+    DESTINATION ${API_INSTALL_DIR}/include/hoomd
+    )

-if (BUILD_TESTING)
-    add_subdirectory(test-py)
+if(BUILD_TESTING)
+    if(BUILD_PYTHON)
+        add_subdirectory(test-py)
+    endif()
     add_subdirectory(test)
 endif()

@@ -389,7 +414,7 @@ if (NOT ENABLE_HIP OR HIP_PLATFORM STREQUAL "nvcc")
     endif()
 endif()

-if (BUILD_JIT)
+if(BUILD_PYTHON AND BUILD_JIT)
     add_subdirectory(jit)
 endif()

@@ -397,6 +422,9 @@ file(GLOB _directory_contents RELATIVE ${CMAKE_CURRENT_SOURCE_DIR} *)

 # explicitly remove packages which are already explicitly dealt with
 list(REMOVE_ITEM _directory_contents test test-py extern md hpmc metal dem mpcd jit)
+if(NOT BUILD_PYTHON)
+    list(REMOVE_ITEM _directory_contents example_plugin)
+endif()

 foreach(entry ${_directory_contents})
     if(IS_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}/${entry} OR IS_SYMLINK ${CMAKE_CURRENT_SOURCE_DIR}/${entry})
diff --git a/hoomd/dem/CMakeLists.txt b/hoomd/dem/CMakeLists.txt
index 8972f842b..af08c5a32 100644
--- a/hoomd/dem/CMakeLists.txt
+++ b/hoomd/dem/CMakeLists.txt
@@ -41,7 +41,15 @@ if (ENABLE_HIP)
 set(_cuda_sources ${_dem_cu_sources})
 endif (ENABLE_HIP)

-pybind11_add_module(_dem SHARED ${_dem_sources} ${_cuda_sources} ${_dem_headers} NO_EXTRAS)
+if(BUILD_PYTHON)
+    pybind11_add_module(_dem SHARED NO_EXTRAS
+        ${_dem_sources} ${_cuda_sources} ${_dem_headers}
+        )
+else()
+    add_library(_dem SHARED
+        ${_dem_sources} ${_cuda_sources} ${_dem_headers}
+        )
+endif()
 # alias into the HOOMD namespace so that plugins and symlinked components both work
 add_library(HOOMD::_dem ALIAS _dem)

@@ -56,11 +64,15 @@ target_link_libraries(_dem PUBLIC _md)
 fix_cudart_rpath(_dem)

 # install the library
-install(TARGETS _dem
-        LIBRARY DESTINATION ${PYTHON_SITE_INSTALL_DIR}/dem
-        )
+install(
+    TARGETS _dem
+    LIBRARY DESTINATION ${API_INSTALL_DIR}/dem
+    )
+
+##################################################
+## Python only modules
+if(BUILD_PYTHON)

-################ Python only modules
 # copy python modules to the build directory to make it a working python package
 MACRO(copy_file file)
     add_custom_command (
@@ -89,11 +101,16 @@ endforeach()

 add_custom_target(copy_dem ALL DEPENDS ${files})

+endif(BUILD_PYTHON)
+## end of Python only modules
+##################################################
+
 # install headers in installation target
-install(FILES ${_dem_headers}
-        DESTINATION ${PYTHON_SITE_INSTALL_DIR}/include/hoomd/dem
-       )
+install(
+    FILES ${_dem_headers}
+    DESTINATION ${API_INSTALL_DIR}/include/hoomd/dem
+    )

-if (BUILD_TESTING)
+if(BUILD_PYTHON AND BUILD_TESTING)
     add_subdirectory(test-py)
 endif()
diff --git a/hoomd/hpmc/CMakeLists.txt b/hoomd/hpmc/CMakeLists.txt
index 51da95ca3..d627140f4 100644
--- a/hoomd/hpmc/CMakeLists.txt
+++ b/hoomd/hpmc/CMakeLists.txt
@@ -91,7 +91,15 @@ if (ENABLE_HIP)
 set(_cuda_sources ${_hpmc_cu_sources})
 endif (ENABLE_HIP)

-pybind11_add_module(_hpmc SHARED ${_hpmc_sources} ${_cuda_sources} ${_hpmc_headers} NO_EXTRAS)
+if(BUILD_PYTHON)
+    pybind11_add_module(_hpmc SHARED NO_EXTRAS
+        ${_hpmc_sources} ${_cuda_sources} ${_hpmc_headers}
+        )
+else()
+    add_library(_hpmc SHARED
+        ${_hpmc_sources} ${_cuda_sources} ${_hpmc_headers}
+        )
+endif()
 # alias into the HOOMD namespace so that plugins and symlinked components both work
 add_library(HOOMD::_hpmc ALIAS _hpmc)

@@ -107,11 +115,15 @@ target_link_libraries(_hpmc PUBLIC _hoomd)
 fix_cudart_rpath(_hpmc)

 # install the library
-install(TARGETS _hpmc EXPORT HOOMDTargets
-        LIBRARY DESTINATION ${PYTHON_SITE_INSTALL_DIR}/hpmc
-        )
+install(
+    TARGETS _hpmc EXPORT HOOMDTargets
+    LIBRARY DESTINATION ${API_INSTALL_DIR}/hpmc
+    )
+
+##################################################
+## Python only modules
+if(BUILD_PYTHON)

-################ Python only modules
 # copy python modules to the build directory to make it a working python package
 MACRO(copy_file file)
     add_custom_command (
@@ -144,16 +156,23 @@ endforeach()

 add_custom_target(copy_hpmc ALL DEPENDS ${files})

+endif(BUILD_PYTHON)
+## end of Python only modules
+##################################################
+
 # install headers in installation target
-install(FILES ${_hpmc_headers}
-        DESTINATION ${PYTHON_SITE_INSTALL_DIR}/include/hoomd/hpmc
-       )
+install(
+    FILES ${_hpmc_headers}
+    DESTINATION ${API_INSTALL_DIR}/include/hoomd/hpmc
+    )

-if (BUILD_TESTING)
-    add_subdirectory(test-py)
+if(BUILD_TESTING)
+    if(BUILD_PYTHON)
+        add_subdirectory(test-py)
+    endif()
     add_subdirectory(test)
 endif()

-if (BUILD_VALIDATION)
+if(BUILD_PYTHON AND BUILD_VALIDATION)
     add_subdirectory(validation)
 endif()
diff --git a/hoomd/md/CMakeLists.txt b/hoomd/md/CMakeLists.txt
index 2be4b8261..265fd13b9 100644
--- a/hoomd/md/CMakeLists.txt
+++ b/hoomd/md/CMakeLists.txt
@@ -256,7 +256,15 @@ if (ENABLE_HIP)
 set(_cuda_sources ${_md_cu_sources} ${DFFT_CU_SOURCES})
 endif (ENABLE_HIP)

-pybind11_add_module(_md SHARED ${_md_sources} ${_cuda_sources} ${DFFT_SOURCES} ${_md_headers} NO_EXTRAS)
+if(BUILD_PYTHON)
+    pybind11_add_module(_md SHARED NO_EXTRAS
+        ${_md_sources} ${_cuda_sources} ${DFFT_SOURCES} ${_md_headers}
+        )
+else()
+    add_library(_md SHARED
+        ${_md_sources} ${_cuda_sources} ${DFFT_SOURCES} ${_md_headers}
+        )
+endif()
 # alias into the HOOMD namespace so that plugins and symlinked components both work
 add_library(HOOMD::_md ALIAS _md)

@@ -280,11 +288,15 @@ endif()
 fix_cudart_rpath(_md)

 # install the library
-install(TARGETS _md EXPORT HOOMDTargets
-        LIBRARY DESTINATION ${PYTHON_SITE_INSTALL_DIR}/md
-        )
+install(
+    TARGETS _md EXPORT HOOMDTargets
+    LIBRARY DESTINATION ${API_INSTALL_DIR}/md
+    )
+
+##################################################
+## Python only modules
+if(BUILD_PYTHON)

-################ Python only modules
 # copy python modules to the build directory to make it a working python package
 MACRO(copy_file file)
     add_custom_command (
@@ -324,16 +336,23 @@ endforeach()

 add_custom_target(copy_md ALL DEPENDS ${files})

+endif(BUILD_PYTHON)
+## end of Python only modules
+##################################################
+
 # install headers in installation target
-install(FILES ${_md_headers}
-        DESTINATION ${PYTHON_SITE_INSTALL_DIR}/include/hoomd/md
-       )
+install(
+    FILES ${_md_headers}
+    DESTINATION ${API_INSTALL_DIR}/include/hoomd/md
+    )

-if (BUILD_TESTING)
-    add_subdirectory(test-py)
+if(BUILD_TESTING)
+    if(BUILD_PYTHON)
+        add_subdirectory(test-py)
+    endif()
     add_subdirectory(test)
 endif()

-if (BUILD_VALIDATION)
+if(BUILD_PYTHON AND BUILD_VALIDATION)
     add_subdirectory(validation)
 endif()
diff --git a/hoomd/metal/CMakeLists.txt b/hoomd/metal/CMakeLists.txt
index 1fffd3117..a1b90cb55 100644
--- a/hoomd/metal/CMakeLists.txt
+++ b/hoomd/metal/CMakeLists.txt
@@ -23,7 +23,15 @@ if (ENABLE_HIP)
 set(_cuda_sources ${_${PACKAGE_NAME}_cu_sources})
 endif (ENABLE_HIP)

-pybind11_add_module(_${PACKAGE_NAME} SHARED ${_${PACKAGE_NAME}_sources} ${_cuda_sources} ${_${PACKAGE_NAME}_headers} NO_EXTRAS)
+if(BUILD_PYTHON)
+    pybind11_add_module(_${PACKAGE_NAME} SHARED NO_EXTRAS
+        ${_${PACKAGE_NAME}_sources} ${_cuda_sources} ${_${PACKAGE_NAME}_headers}
+        )
+else()
+    add_library(_${PACKAGE_NAME} SHARED
+        ${_${PACKAGE_NAME}_sources} ${_cuda_sources} ${_${PACKAGE_NAME}_headers}
+        )
+endif()
 # alias into the HOOMD namespace so that plugins and symlinked components both work
 add_library(HOOMD::_${PACKAGE_NAME} ALIAS _${PACKAGE_NAME})

@@ -39,11 +47,15 @@ target_link_libraries(_${PACKAGE_NAME} PUBLIC _md)
 fix_cudart_rpath(_${PACKAGE_NAME})

 # install the library
-install(TARGETS _${PACKAGE_NAME}
-        LIBRARY DESTINATION ${PYTHON_SITE_INSTALL_DIR}/${PACKAGE_NAME}
-        )
+install(
+    TARGETS _${PACKAGE_NAME}
+    LIBRARY DESTINATION ${API_INSTALL_DIR}/${PACKAGE_NAME}
+    )
+
+##################################################
+## Python only modules
+if(BUILD_PYTHON)

-################ Python only modules
 # copy python modules to the build directory to make it a working python package
 MACRO(copy_file file)
     add_custom_command (
@@ -70,12 +82,17 @@ endforeach()

 add_custom_target(copy_${PACKAGE_NAME} ALL DEPENDS ${files})

+endif(BUILD_PYTHON)
+## end of Python only modules
+##################################################
+
 # install headers in installation target
-install(FILES ${_${PACKAGE_NAME}_headers}
-        DESTINATION ${PYTHON_SITE_INSTALL_DIR}/include/hoomd/${PACKAGE_NAME}
-       )
+install(
+    FILES ${_${PACKAGE_NAME}_headers}
+    DESTINATION ${API_INSTALL_DIR}/include/hoomd/${PACKAGE_NAME}
+    )

-if (BUILD_TESTING)
+if(BUILD_PYTHON AND BUILD_TESTING)
     add_subdirectory(test-py)
     # add_subdirectory(test)
 endif()
diff --git a/hoomd/mpcd/CMakeLists.txt b/hoomd/mpcd/CMakeLists.txt
index 9d9429150..674981362 100644
--- a/hoomd/mpcd/CMakeLists.txt
+++ b/hoomd/mpcd/CMakeLists.txt
@@ -112,7 +112,15 @@ if (ENABLE_HIP)
     set(_cuda_sources ${_mpcd_cu_sources})
 endif (ENABLE_HIP)

-pybind11_add_module(_mpcd SHARED ${_mpcd_sources} ${LINK_OBJ} ${_cuda_sources} ${_mpcd_headers} NO_EXTRAS)
+if(BUILD_PYTHON)
+    pybind11_add_module(_mpcd SHARED NO_EXTRAS
+        ${_mpcd_sources} ${LINK_OBJ} ${_cuda_sources} ${_mpcd_headers}
+        )
+else()
+    add_library(_mpcd SHARED
+        ${_mpcd_sources} ${LINK_OBJ} ${_cuda_sources} ${_mpcd_headers}
+        )
+endif()
 # alias into the HOOMD namespace so that plugins and symlinked components both work
 add_library(HOOMD::_mpcd ALIAS _mpcd)

@@ -137,11 +145,15 @@ endif (ENABLE_HIP)
 fix_cudart_rpath(_mpcd)

 # install the library
-install(TARGETS _mpcd EXPORT HOOMDTargets
-        LIBRARY DESTINATION ${PYTHON_SITE_INSTALL_DIR}/mpcd
-        )
+install(
+    TARGETS _mpcd EXPORT HOOMDTargets
+    LIBRARY DESTINATION ${API_INSTALL_DIR}/mpcd
+    )
+
+##################################################
+## Python only modules
+if(BUILD_PYTHON)

-################ Python only modules
 # copy python modules to the build directory to make it a working python package
 MACRO(copy_file file)
     add_custom_command (
@@ -175,15 +187,22 @@ endforeach()

 add_custom_target(copy_mpcd ALL DEPENDS ${files})

+endif(BUILD_PYTHON)
+## end of Python only modules
+##################################################
+
 # install headers in installation target
-install(FILES ${_mpcd_headers}
-        DESTINATION ${PYTHON_SITE_INSTALL_DIR}/include/hoomd/mpcd
-       )
+install(
+    FILES ${_mpcd_headers}
+    DESTINATION ${API_INSTALL_DIR}/include/hoomd/mpcd
+    )

-if (BUILD_TESTING)
-    add_subdirectory(test-py)
+if(BUILD_TESTING)
+    if(BUILD_PYTHON)
+        add_subdirectory(test-py)
+    endif()
+    add_subdirectory(test)
 endif()
-add_subdirectory(test)
-if (BUILD_VALIDATION)
+if(BUILD_PYTHON AND BUILD_VALIDATION)
     add_subdirectory(validation)
-endif (BUILD_VALIDATION)
+endif()
